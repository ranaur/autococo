#!/usr/bin/env bash
AUTOCOCODIR=$(realpath "$0")
AUTOCOCODIR=$(dirname "$AUTOCOCODIR")
SCRIPTDIR="$AUTOCOCODIR/scripts"

source "$SCRIPTDIR/autococo.sh"

function call_emulator() {
#debugfc $FUNCNAME "$@"
	if [ ! -x "$SCRIPTDIR/emulator.$EMULATOR.sh" ] ; then
		error emulator "$EMULATOR" does not exist!
		return 1
	fi

	local err=0
	debug Current dir: `pwd`
	debug floppy0: $coco_setup_floppy0
	if [ ! -z "$coco_setup_floppy0" ] && [ ! -f "$coco_setup_floppy0" ] ; then
		error "File $coco_setup_floppy0 for Floppy 0 is missing"
		err=1
	fi
	debug floppy1: $coco_setup_floppy1
	if [ ! -z "$coco_setup_floppy1" ] && [ ! -f "$coco_setup_floppy1" ] ; then
		error "File $coco_setup_floppy1 for Floppy 1 is missing"
		err=1
	fi
	debug floppy2: $coco_setup_floppy2
	if [ ! -z "$coco_setup_floppy2" ] && [ ! -f "$coco_setup_floppy2" ] ; then
		error "File $coco_setup_floppy2 for Floppy 2 is missing"
		err=1
	fi
	debug floppy3: $coco_setup_floppy3
	if [ ! -z "$coco_setup_floppy3" ] && [ ! -f "$coco_setup_floppy3" ] ; then
		error "File $coco_setup_floppy3 for Floppy 3 is missing"
		err=1
	fi
	debug floppy3: $coco_setup_hd0
	if [ ! -z "$coco_setup_floppy3" ] && [ ! -f "$coco_setup_floppy3" ] ; then
		error "File $coco_setup_floppy3 for Floppy 3 is missing"
		err=1
	fi
	debug hd0: $coco_setup_hd0
	if [ ! -z "$coco_setup_hd0" ] && [ ! -f "$coco_setup_hd0" ] ; then
		error "File $coco_setup_hd0 for Hard Disk 0 is missing"
		err=1
	fi
	debug hd1: $coco_setup_hd1
	if [ ! -z "$coco_setup_hd1" ] && [ ! -f "$coco_setup_hd1" ] ; then
		error "File $coco_setup_hd1 for Hard Disk 1 is missing"
		err=1
	fi
	debug cassete: $coco_setup_cassete
	if [ ! -z "$coco_setup_cassete" ] && [ ! -f "$coco_setup_cassete" ] ; then
		error "File $coco_setup_cassete for cassete is missing"
		err=1
	fi
	debug rompack: $coco_setup_rompack
	if [ ! -z "$coco_setup_rompack" ] && [ ! -f "$coco_setup_rompack" ] ; then
		error "File $coco_setup_rompack for rompack is missing"
		err=1
	fi


	if [ $err = 1 ] ; then
		error Aborting.
		return -1
	fi
	echo MOCK: "$SCRIPTDIR/emulator.$EMULATOR.sh" "$@"
	return $?
}

function cmd_execute() {
#debugfc $FUNCNAME "$@"
	if [ $# -ne 1 ] && [ $# -ne 2 ] ; then 
		cat << __HELP__
usage: $0 execute package [config]

Runs package in the emulator configured. Optional parameter is the configuration.

__HELP__
		return -1;
	fi

	local package="$1"
	local configuration="${2:-default}"
	local autococofile="${configuration}.autococo"
	local autococo="${PACKAGES_DIR}/${package}/${autococofile}"
	if [[ ! -f "${autococo}" ]] ; then
		error "Configuration $configuration not found in package directory. Aborting"
		return -1
	fi

	autococo_load "$autococo"
	pushd "${PACKAGES_DIR}/${package}" >& /dev/null
	call_emulator
	popd >& /dev/null
}

function cmd_prepare() {
#debugfc $FUNCNAME "$@"
	if [ $# -ne 1 ] ; then 
		cat << __HELP__
usage: $0 prepare file

Prepare a package directory with file. The behaviour depends on the filetype passed:
   .autococo => fetch the file in URL or source field, and execute
   .DSK, .CAS, .ZIP or .CCC => looks for an .autococo in the same directory
	infer, if it doesn't exit

Creates a directory on the PACKAGES_DIR ($PACKAGE_DIRS) with an autococo file aas default.autococo
(original or infered) any file needed or passed as parameter
__HELP__
		return -1;
	fi

	local file="$1"
	local filetype="${file##*.}"
	if [[ ${filetype,,} == "autococo" ]] ; then
		# user passsed autococo, but not the ZIP/DSK/CAS/CCC
		autococo="$file"

		autococo_load "$autococo"
		local dir ; dir=$(dirname "$file")
		file="$dir/$coco_package_file"
		if [[ ! -f "$file" ]] ; then file="${1%.*}.zip" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.ZIP" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.DSK" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.dsk" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.CCC" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.ccc" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.CAS" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.cas" ; fi
		if [[ ! -f "$file" ]] ; then
			if [[ -z "$coco_package_url" ]] ; then
				error "Passed autococo has no URL to download, check if there is the original ZIP/DSK/CAS/CCC file with the same base name as the autococo file or correct the package:url parameter."			else
				return 1
			else
				cmd_download "$coco_package_url"
				# cmd_download already sets $file
				if [[ $? != 0 ]] ; then
					error "Cannot find/download necessary files to run this autococo."
				fi
			fi
		fi
			# change the filetype variable for the real one
		filetype="${file##*.}"
	else # all other extensions
		# user passsed ZIP/DSK/CAS/CCC, but not the autococo
		# looks for an autococo file and creates it if it is not found
		local autococo="${file%.*}.autococo"
		if [[ ! -f "$autococo" ]] ; then
			echo "No autococo file found, infering from the data"
			cmd_infer "$1" "$autococo"
		fi

		autococo_load "$autococo"
	fi

	# at this point $file has the ZIP/DSK/CAS/CCC and $autococo the autococo (loaded in coco_* vars)
	local packagename=$(basename "${file%.*}")
	local packagedir="$PACKAGES_DIR/$packagename"

	if [[ -d "$packagedir" ]] ; then
		# XXX implement -f option to override
		echo Package ${file%.*} already exist in packages directory.
		echo Aborting.
		return -2
	fi

	mkdir -p "$packagedir"

	case ${filetype,,} in
	zip)
	  unzip_at "$1" "$packagedir"
	  ;;
	dsk|cas|ccc)
	  cp "$1" "$packagedir"
	  ;;
	*)
	  echo NOT IMPLEMENTED
	  exit -1
	  ;;
	esac
	cp "$autococo" "$packagedir/default.autococo"
}

function cmd_download() { # URL
#debugfc $FUNCNAME "$@"
	file=$(autococo_download "$@")
	if [[ $? == 0 ]] ; then
		echo "Download ok. Local file at $file"
		return 0
	else
		echo "ERROR: Download failed!"
		return 1
	fi
}

function cmd_infer() { # dsk/zip/cas file
#debugfc $FUNCNAME "$@"
	local ext="${1##*.}"
	filename=$(basename "$1")
	local out
	if [[ -z "$2" ]] ; then
		out="${filename%.*}.autococo"
	else
		out="$2"
	fi
	
	inferred__=(inferred_package inferred_setup)
	inferred_package_=(inferred_package_status)
	inferred_package_status="inferred"
	inferred_setup_=()
	infer_archive_cocoarchive "$1"

	#echo "FILE: $1"
	case ${ext,,} in
	zip)
		infer_zip "$1"
		;;
	dsk)
		infer_dsk "$1"
		;;
	cas)
		infer_cas "$1"
		;;
	rom | ccc)
		infer_ccc "$1"
		;;
	*)
		echo Cannot infer for extension "$ext"
		return 1
	esac

#echo VARIABLES[]: ${!inferred_@}
#debug out="$out"
	save_yaml inferred "$out"

	return $?
}

function cmd_run() { # autococo.file dsk/zip/cas file
#debugfc $FUNCNAME "$@"
	if [ $# -ne 1 ] ; then 
		cat << __HELP__
usage: $0 run file

Runs file in the emulator configured. The behaviour depends on the filetype:
   .autococo => fetch the file in URL or source field, and execute
   .DSK, .CAS, .ZIP or .CCC => looks for an .autococo in the same directory
	infer, if it doesn't exist

__HELP__
		return -1;
	fi

	local file="$1"
	local filetype="${file##*.}"
	if [[ ${filetype,,} == "autococo" ]] ; then
		# user passsed autococo, but not the ZIP/DSK/CAS/CCC
		autococo="$file"

		autococo_load "$autococo"
		local dir ; dir=$(dirname "$file")
		file="$dir/$coco_package_file"
		if [[ ! -f "$file" ]] ; then file="${1%.*}.zip" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.ZIP" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.DSK" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.dsk" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.CCC" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.ccc" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.CAS" ; fi
		if [[ ! -f "$file" ]] ; then file="${1%.*}.cas" ; fi
		if [[ ! -f "$file" ]] ; then
			if [[ -z "$coco_package_url" ]] ; then
				error "Passed autococo has no URL to download, check if there is the original ZIP/DSK/CAS/CCC file with the same base name as the autococo file or correct the package:url parameter."			else
				return 1
			else
				cmd_download "$coco_package_url"
				# cmd_download already sets $file
				if [[ $? != 0 ]] ; then
					error "Cannot find/download necessary files to run this autococo."
				fi
			fi
		fi
			# change the filetype variable for the real one
		filetype="${file##*.}"
	else # all other extensions
		# user passsed ZIP/DSK/CAS/CCC, but not the autococo
		# looks for an autococo file and creates it if it is not found
		local autococo="${file%.*}.autococo"
		if [[ ! -f "$autococo" ]] ; then
			cmd_infer "$1" "$autococo"
		fi

		autococo_load "$autococo"
	fi

	# at this point $file has the ZIP/DSK/CAS/CCC and $autococo the autococo (loaded in coco_* vars)

	case ${filetype,,} in
	zip)
	  WORK_DIR="$WORK_DIR/run"
	  unzip_at "$1" "$WORK_DIR"
	  ;;
	dsk)
	  coco_setup_floppy0="$1"
	  WORK_DIR=$(dirname "$1")
	  ;;
	cas)
	  coco_setup_cassette="$1"
	  WORK_DIR=$(dirname "$1")
	  ;;
	ccc)
	  coco_setup_rompack="$1"
	  WORK_DIR=$(dirname "$1")
	  ;;
	*)
	  echo NOT IMPLEMENTED
	  return -1
	  ;;
	esac

	call_emulator
}

case "$1" in
  run)
    shift
    cmd_run "$@"
    exit $?
    ;;
  infe|infer)
    shift
    cmd_infer "$@"
    exit $?
    ;;
  down|download)
    shift
    cmd_download "$@"
    exit $?
    ;;
  prep|prepare)
    shift
    cmd_prepare "$@"
    exit $?
    ;;
  exec|execute)
    shift
    cmd_execute "$@"
    exit $?
    ;;
  *)
    cat << __HELP__
usage: $0 command parameters ...

where command is:
  infer _file_ = infer the AUTOCOCO from file
  run _autococo_file_ _file_ = execute the file in the emulator using autococo as configuration
  download [-f] _url_ = downloads URL and stores in the archive (-f forces the download if file already exist)
  prepare _autococo_file_ = prepares a directory with all files needed to run
  execute package = runs the emulator for the specified package
__HELP__
    exit -1
    ;;
esac
